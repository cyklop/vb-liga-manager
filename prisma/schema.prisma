generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Geänderter Output-Pfad gemäß Prisma-Empfehlung
}

datasource db {
  provider = "mysql" // Statischer Provider für lokale MYSQL-Entwicklung
  url      = env("DATABASE_URL")      // URL aus Umgebungsvariable lesen
}

model Team {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  location        String?
  hallAddress     String?
  trainingTimes   String?
  users           UserTeam[]
  teamLeader      User?     @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  teamLeaderId    Int?      @unique

  leagues         League[]  // Many-to-many relation with leagues
  homeFixtures    Fixture[] @relation("HomeTeam") // Relation for fixtures where this team is home
  awayFixtures    Fixture[] @relation("AwayTeam") // Relation for fixtures where this team is away
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String? // Passwort ist jetzt optional bei Erstellung
  name         String
  isAdmin      Boolean    @default(false)
  isSuperAdmin Boolean    @default(false)
  theme        String     @default("system") // "light", "dark", or "system"
  teams        UserTeam[]
  leadingTeam  Team?      @relation("TeamLeader")

  // Fields for password reset
  passwordResetToken  String?   @unique
  passwordResetExpires DateTime?

  // Fields for initial password setup
  passwordSetupToken   String?  @unique // NEU
  passwordSetupExpires DateTime? // NEU
}

// Verbindungstabelle für die m:n-Beziehung zwischen User und Team
model UserTeam {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    Int
  createdAt DateTime @default(now())

  @@id([userId, teamId])
}

// Enum to define how scores are entered for a league
enum ScoreEntryType {
  MATCH_SCORE // Only the final match score (e.g., 3:1) is entered
  SET_SCORES  // Individual set scores (e.g., 25:20, 23:25, ...) are entered
}

model League {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  slug              String    @unique // Sprechender URL-Slug (z.B. "volleyball-hobbyliga-2024")
  numberOfTeams     Int
  hasReturnMatches  Boolean
  teams             Team[]
  fixtures          Fixture[]
  isActive          Boolean   @default(true) // Flag to mark league as active/inactive
  createdAt         DateTime  @default(now()) // Track creation date
  scoreEntryType    ScoreEntryType @default(MATCH_SCORE) // How scores are entered (match vs sets)
  setsToWin         Int       @default(3)     // Number of sets needed to win a match (e.g., 2 for Bo3, 3 for Bo5)

  // Point rules for the league - These depend on the final set score (e.g., 3:0, 3:1, 3:2)
  pointsWin30       Int       @default(3) // Points for winning 3:0 (or 2:0 if setsToWin=2)
  pointsWin31       Int       @default(3) // Points for winning 3:1
  pointsWin32       Int       @default(2) // Points for winning 3:2
  pointsLoss32      Int       @default(1) // Points for losing 2:3
  // pointsLoss31 and pointsLoss30 are implicitly 0
}

model Fixture {
  id           Int       @id @default(autoincrement())
  leagueId     Int
  league       League    @relation(fields: [leagueId], references: [id], onDelete: Cascade) // Cascade delete fixtures if league is deleted
  round        Int?      // Optional round number
  matchday     Int?      // Optional matchday number
  homeTeamId   Int
  homeTeam     Team      @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade) // Prevent fixture if team is deleted? Or set null? Cascade for now.
  awayTeamId   Int
  awayTeam     Team      @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  fixtureDate  DateTime? // Optional date and time of the fixture
  fixtureTime  String?   // Optional time of the fixture (e.g., "18:30")

  // Final Score (Sets Won) - Always populated when result is known
  homeScore    Int?      // Total sets won by home team (e.g., 3)
  awayScore    Int?      // Total sets won by away team (e.g., 1)

  // Individual Set Scores (only used if league.scoreEntryType == SET_SCORES)
  homeSet1     Int?
  awaySet1     Int?
  homeSet2     Int?
  awaySet2     Int?
  homeSet3     Int?
  awaySet3     Int?
  homeSet4     Int?      // Needed for Bo5
  awaySet4     Int?
  homeSet5     Int?      // Needed for Bo5 (tie-break)
  awaySet5     Int?

  // Optional total points (balls) - Can be useful even with set scores for tie-breakers?
  homePoints        Int?
  awayPoints        Int?

  // Calculated match points based on league rules
  homeMatchPoints   Int?
  awayMatchPoints   Int?

  notes             String?   // Optional field for fixture notes/comments

  order        Int       // For manual sorting

  @@index([leagueId])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

// Settings model for application configuration
model Setting {
  key   String @id
  value String

  @@map("settings")
}
